#apiVersion: autoscaling/v1
#kind: HorizontalPodAutoscaler
#metadata:
#  name: hpa
#  namespace: go
#spec:
#  minReplicas: 3  #最小pod数量
#  maxReplicas: 10 #最大pod数量
#  targetCPUUtilizationPercentage: 2 # CPU使用率指标
#  scaleTargetRef:   # 指定要控制的nginx信息
#    apiVersion: apps/v1 # 注意不要写错啦
#    kind: Deployment
#    name: mydemo-deployment

---

apiVersion: v1
kind: Service
metadata:
  name: mydemo
  namespace: go
spec:
  clusterIP: 10.99.99.99 #固定svc的内网ip
  #  sessionAffinity: ClientIP  # 来自同一个IP的请求，使用同一个pod响应
  type: NodePort
  selector:
    app: mydemo-app
  ports:
    - port: 7000  #service端口
      protocol: TCP
      targetPort: 8080 #pod内的端口

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydemo-deployment
  namespace: go
spec:
  strategy: # 策略
    type: RollingUpdate # 滚动更新策略
  replicas: 3
  selector:
    matchLabels:
      app: mydemo-app
  template:
    metadata:
      labels:
        app: mydemo-app
    spec:
      containers:
        - name: app
          image: app:1.1
          resources: # 资源配额
            limits: # 限制资源（上限）
              cpu: "1" # CPU限制，单位是core数
            requests: # 请求资源（下限）
              cpu: "100m"  # CPU限制，单位是core数
          ports:
            - containerPort: 8080
          command:
            - /bin/bash
            - -c
            - |
              sh ./wait-for redis:6379 -- echo "redis successfully run!"  
              sh ./wait-for mysql:3306 -- ./main